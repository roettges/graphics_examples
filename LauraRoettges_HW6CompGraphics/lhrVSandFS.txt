#ifdef VS 
 
precision highp float;
attribute vec3 position;
attribute vec3 normal;
uniform mat3 normalMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
varying vec3 fNormal;
varying vec3 worldPosition;
varying vec3 dragonPos;
varying vec3 modPos;
varying vec3 modNormal;
varying vec3 dampenedSinPos;
const float pi=3.14159;

uniform float time;

vec2 Rotate2D(vec2 vec_in, float angle)
{
  vec2 vec_out;
  vec_out.x=cos(angle)*vec_in.x-sin(angle)*vec_in.y;
  vec_out.y=sin(angle)*vec_in.x+cos(angle)*vec_in.y;
  
  return vec_out;
}

void main()
{
  //use provided attributes but save to varying so we can modify
  modPos=position;
  modNormal=normal; 
  
  //starts the same as the model position but want to change seperately than just the model position based on a dampened sin curve function
  dampenedSinPos.xyz = position; 
  dampenedSinPos.x = -dampenedSinPos.x+sin(time*8.8);
  
  //offset to update model z position
  float ztransf = float((exp(-pi*.65*(.8*dampenedSinPos.x-1.0))*cos(2.0*pi*pi*(.8*dampenedSinPos.x-1.0)*.65)/500.0));

  modPos.z = modPos.z+ztransf; //update z position of dragon
  
  //update moddNormal.z based on the derivative of ztransf because we are changing the z location of the object and want light to behave 
  float dervZtransf = (((-0.52*pi*exp(0.65*pi-(0.52*dampenedSinPos.x)))*cos((1.04*pi*pi*dampenedSinPos.x)-(1.3*pi*pi)))-((1.04*pi*pi*sin((1.04*pi*pi*dampenedSinPos.x)-(1.3*pi*pi)))*exp((0.65*pi)-(0.52*pi*dampenedSinPos.x))))/500.0;
  //update normal for z
  modNormal.z = modNormal.z+dervZtransf;
  
  // added the twisting from the sample example but made less extreme
  modPos.xy = Rotate2D(modPos.xy,0.1*pi*modPos.z*sin(10.0*time*2.0)); // Try commenting out *just* this line :)
  modNormal.xy = Rotate2D(modPos.xy,0.1*pi*modPos.z*sin(10.0*time*2.0)); // This is simple as that only since the transform is rotation
  
  fNormal = normalize(normalMatrix * modNormal);
  vec4 pos = modelViewMatrix * vec4(modPos,1.0);//vec4(position, 1.0)
  worldPosition = pos.xyz;
  dragonPos = position;
  gl_Position = projectionMatrix * pos;
}
 
#else 
 
precision highp float;
uniform float time;
uniform vec2 resolution;
varying vec3 worldPosition;
varying vec3 fNormal;
varying vec3 dragonPos;
varying vec2 rawXY;
varying vec3 modPos;
varying vec3 modNormal;
varying vec3 dampenedSinPos;

const float ambient_coeff   = 0.2;
const float specular_coeff  = 2.9;
const float specular_exp    = 25.0;
const float spec_coeff_2 = 4.0;
const float spec_exp_2 = 30.0;
const float diffuse_coeff =1.7;
const float diffuse_coeff2 =0.7;
const vec3  light_direction = vec3(-.3,-1.8,1.0); // stationary light
const vec3  light_color     = vec3(0.86,0.36,0.36); //redish
const vec3  light_color2     = vec3(0.0,0.0,1.0); //blue

//reusing this from code example
float pulse(float val, float dst) {
  return floor(mod(val*dst,1.0)+.5);
}


//float cycloidX(float rad, float t) {
//  float cycX = rad * (t - sin(t));
//  return cycX;
//}

//float cycloidY(float rad, float t) {
//  float cycY = rad * (1.0 - cos(t));
//  return cycY;
//}

void main()
{
  float theta1 = time*28.0;
  vec3 dirL2 = vec3(sin(theta1)+cos(theta1),sin(theta1),-cos(theta1));
  vec3 dragloc = dragonPos.xyz;

  vec3 objcolor = vec3(1.0,0.3,pulse(dragloc.z,8.0));
  //vec3 objcolor = vec3(.0,1,1);
  
  vec3 lightDir = normalize(light_direction);
  vec3 normDir = normalize(fNormal);
  vec3 eyeDir = normalize(-worldPosition);
  vec3 halfwayDir = normalize (eyeDir+lightDir);
  
  vec3 lightDir2 = normalize(dirL2);
  vec3 halfwayDir2 = normalize (eyeDir+lightDir2);

  vec3 ambient_color  = ambient_coeff  * objcolor;
  vec3 specular_color = specular_coeff * pow(max(0.0,dot(normDir,halfwayDir)),specular_exp) * light_color;
  vec3 diffuse = diffuse_coeff * dot(fNormal,lightDir)*objcolor * light_color;
  
  vec3 specular_color2 = spec_coeff_2 * pow(max(0.0,dot(normDir,halfwayDir2)),spec_exp_2) * light_color2;
  vec3 diffuse2 =diffuse_coeff2 *dot(fNormal,dirL2) * objcolor * light_color2;
  
  
  gl_FragColor = vec4(ambient_color+diffuse+specular_color +diffuse2+specular_color2, 1.0);
}


 
#endif